DEF-USE ANALYSIS FOR WITHDRAWCONTRACT.SOL

Variables in the contract:
1. balance (int256)
2. owner (address)
3. amountIn (int256, parameter)

DEFINITIONS (def):
1. balance:
   - def1: Set balance = initialBalance (in constructor)
   - def2: balance -= amountIn (in withdraw function)

2. owner:
   - def1: Set owner = msg.sender (in constructor)

3. amountIn:
   - def1: Function parameter (implicit definition)

PREDICATE USES (p-uses):
1. msg.sender:
   - p-use1: msg.sender != owner (in owner check)
   - p-use2: msg.sender = owner (implicit in constructor)

2. amountIn:
   - p-use1: amountIn <= 0 (in amount zero check)
   - p-use2: amountIn > balance (in balance check)
   - p-use3: amountIn > 3000 (in limit check)

3. balance:
   - p-use1: amountIn > balance (in balance check)

COMPUTATION USES (c-uses):
1. balance:
   - c-use1: balance -= amountIn (in update operation)

2. amountIn:
   - c-use1: balance -= amountIn (in update operation)

3. owner:
   - c-use1: msg.sender != owner (in owner check)

DEF-USE CHAINS:
1. balance:
   def1 -> p-use1 -> def2
   (initialBalance -> balance check -> update)

2. owner:
   def1 -> p-use1
   (msg.sender -> owner check)

3. amountIn:
   def1 -> p-use1 -> p-use2 -> p-use3 -> c-use1
   (parameter -> zero check -> balance check -> limit check -> update)

Note:
- A definition (def) is where a variable gets a value
- A predicate use (p-use) is where a variable is used in a condition
- A computation use (c-use) is where a variable is used in a computation
- Def-use chains show how values flow through the program 